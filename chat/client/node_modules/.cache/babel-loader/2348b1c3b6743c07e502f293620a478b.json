{"ast":null,"code":"var _jsxFileName = \"/run/media/lin/Data/2022study/newchat/oldclient/src/contexts/ConversationsProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback } from 'react';\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider'; // import { useSocket } from './SocketProvider';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext([]);\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    children,\n    id\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectConversationIndex, setselectConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts(); // const socket = useSocket()\n  //创建新对话 \n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      //令其为假 若没有对话 在结尾添加新的对话\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          {\n            madeChange = true;\n            return { ...conversation,\n              messages: [...conversation.messages, newMessage]\n            };\n          }\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          message: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]); // useEffect(() => {\n  //   if(socket == null) return;\n  //   socket.on('receive-message',addMessageToConversation)\n  //   return () => socket.off('receive-message')\n  // },[socket,addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    // socket.emit('send-message',{recipients,text})\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  } //格式化对话 使其方便使用\n\n\n  const formattedConversations = conversations === null || conversations === void 0 ? void 0 : conversations.map((conversation, index) => {\n    var _conversation$recipie, _conversation$message;\n\n    const recipients = (_conversation$recipie = conversation.recipients) === null || _conversation$recipie === void 0 ? void 0 : _conversation$recipie.map(recipient => {\n      //找到我们的联系人\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = (_conversation$message = conversation.messages) === null || _conversation$message === void 0 ? void 0 : _conversation$message.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender; // console.log(contact,name)\n\n      const fromMe = id === message.sender; //添加一个称为发件人的新属性\n\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected,\n      messages\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectConversationIndex],\n    sendMessage,\n    selectConversation: setselectConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ConversationsProvider, \"iNZmTRDS0JStW2T51USAmEW/MCs=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/run/media/lin/Data/2022study/newchat/oldclient/src/contexts/ConversationsProvider.tsx"],"names":["React","useContext","useState","useCallback","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","id","conversations","setConversations","selectConversationIndex","setselectConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","message","sendMessage","formattedConversations","index","recipient","contact","find","name","fromMe","senderName","selected","value","selectedConversation","selectConversation","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, FC, useState, useEffect ,useCallback} from 'react';\r\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\n// import { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext<any>([]);\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport const ConversationsProvider: FC<any> = ({\r\n  children,\r\n  id\r\n}) => {\r\n\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectConversationIndex, setselectConversationIndex] = useState(0)\r\n  const { contacts } = useContacts()\r\n  // const socket = useSocket()\r\n\r\n  //创建新对话 \r\n  function createConversation(recipients: any) {\r\n    setConversations((prevConversations: any) => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }: { recipients: any, text: any, sender: any }) => {\r\n    setConversations((prevConversations: any) => {\r\n      //令其为假 若没有对话 在结尾添加新的对话\r\n      let madeChange = false\r\n      const newMessage = { sender, text }\r\n\r\n      const newConversations = prevConversations.map(\r\n        (conversation: any) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            {\r\n              madeChange = true\r\n              return {\r\n                ...conversation,\r\n                messages: [...conversation.messages, newMessage]\r\n              }\r\n            }\r\n          }\r\n          return conversation\r\n        }\r\n      )\r\n\r\n      if (madeChange) {\r\n        return newConversations\r\n      } else {\r\n        return [...prevConversations, {\r\n          recipients, message: [newMessage]\r\n        }]\r\n      }\r\n\r\n    })\r\n  },[setConversations])\r\n\r\n  // useEffect(() => {\r\n  //   if(socket == null) return;\r\n\r\n  //   socket.on('receive-message',addMessageToConversation)\r\n\r\n  //   return () => socket.off('receive-message')\r\n  // },[socket,addMessageToConversation])\r\n\r\n  function sendMessage(recipients: any, text: any) {\r\n\r\n    // socket.emit('send-message',{recipients,text})\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n\r\n  //格式化对话 使其方便使用\r\n  const formattedConversations = conversations?.map((conversation: { recipients: any[], messages: any[] }, index: number) => {\r\n\r\n    const recipients = conversation.recipients?.map(recipient => {\r\n\r\n      //找到我们的联系人\r\n\r\n      const contact = contacts.find((contact: { id: string; }) => {\r\n        return contact.id === recipient\r\n      })\r\n\r\n      const name = (contact && contact.name) || recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages?.map(message => {\r\n      const contact = contacts.find((contact: { id: string; }) => {\r\n        return contact.id === message.sender\r\n      })\r\n      const name = (contact && contact.name) || message.sender\r\n      // console.log(contact,name)\r\n      const fromMe = id === message.sender\r\n      //添加一个称为发件人的新属性\r\n      return {...message,senderName:name,fromMe}\r\n    })\r\n    const selected = index === selectConversationIndex\r\n\r\n    return { ...conversation, recipients, selected ,messages}\r\n  })\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectConversationIndex],\r\n    sendMessage,\r\n    selectConversation: setselectConversationIndex,\r\n    createConversation\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a: any[], b: any[]) {\r\n  if (a.length !== b.length) return false\r\n  a.sort()\r\n  b.sort()\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}