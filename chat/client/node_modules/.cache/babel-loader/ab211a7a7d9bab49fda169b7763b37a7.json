{"ast":null,"code":"var _jsxFileName = \"D:\\\\2022study\\\\newchat\\\\oldclient\\\\src\\\\contexts\\\\ContactsProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactsContext = /*#__PURE__*/React.createContext([]);\nexport function useContacts() {\n  _s();\n\n  return useContext(ContactsContext);\n}\n\n_s(useContacts, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ContactsProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n\n  function createContact(id, name) {\n    setContacts(prevContacts => {\n      return [...prevContacts, {\n        id,\n        name\n      }];\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(ContactsContext.Provider, {\n    value: {\n      contacts,\n      createContact\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ContactsProvider, \"aWfzfaPwLedoIhPywC4kgPBb+0k=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = ContactsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsProvider\");","map":{"version":3,"sources":["D:/2022study/newchat/oldclient/src/contexts/ContactsProvider.tsx"],"names":["React","useContext","useLocalStorage","ContactsContext","createContext","useContacts","ContactsProvider","children","contacts","setContacts","createContact","id","name","prevContacts"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAsC,OAAtC;AACA,OAAOC,eAAP,MAA4B,qCAA5B;;AAEA,MAAMC,eAAe,gBAAGH,KAAK,CAACI,aAAN,CAAyB,EAAzB,CAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,SAAOJ,UAAU,CAACE,eAAD,CAAjB;AACD;;GAFeE,W;;AAIhB,OAAO,MAAMC,gBAA6B,GAAG,QAEvC;AAAA;;AAAA,MAFwC;AAC5CC,IAAAA;AAD4C,GAExC;AAEJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,eAAe,CAAC,UAAD,EAAa,EAAb,CAA/C;;AAEA,WAASQ,aAAT,CAAuBC,EAAvB,EAAmCC,IAAnC,EAAiD;AAC/CH,IAAAA,WAAW,CAAEI,YAAD,IAAuB;AACjC,aAAO,CAAC,GAAGA,YAAJ,EAAkB;AAAEF,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAAlB,CAAP;AACD,KAFU,CAAX;AAGD;;AAED,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAF;AAAaE,MAAAA;AAAb,KAAjC;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjBM;;IAAMD,gB;UAIqBJ,e;;;KAJrBI,gB","sourcesContent":["import React, { useContext, FC } from 'react';\r\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\r\n\r\nconst ContactsContext = React.createContext<any>([]);\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext)\r\n}\r\n\r\nexport const ContactsProvider: FC<unknown> = ({\r\n  children\r\n}) => {\r\n\r\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\r\n  \r\n  function createContact(id: string, name: string) {\r\n    setContacts((prevContacts: any) => {\r\n      return [...prevContacts, { id, name }]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts , createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}