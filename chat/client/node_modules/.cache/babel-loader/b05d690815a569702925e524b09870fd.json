{"ast":null,"code":"var _jsxFileName = \"D:\\\\2021\\\\chat\\\\client\\\\src\\\\compoments\\\\NewConversationModal\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { useContacts } from \"../../contexts/ContactsProvider\";\nimport { useConversations } from \"../../contexts/ConversationsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewConversationModal = _ref => {\n  _s();\n\n  let {\n    closeModal\n  } = _ref;\n  const [selectedContactIds, setselectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n  const {\n    createConversation\n  } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setselectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: \"Create Converstions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [contacts === null || contacts === void 0 ? void 0 : contacts.map(contact => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: contact.id,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            value: selectedContactIds.includes(contact.id) ? 1 : 0,\n            label: contact.name,\n            onChange: () => handleCheckboxChange(contact.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, contact.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \" Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NewConversationModal, \"wv3/SCDidj586pFfhv9UnnEpyIw=\", false, function () {\n  return [useContacts, useConversations];\n});\n\n_c = NewConversationModal;\nexport default NewConversationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewConversationModal\");","map":{"version":3,"sources":["D:/2021/chat/client/src/compoments/NewConversationModal/index.tsx"],"names":["React","useState","Button","Form","Modal","useContacts","useConversations","NewConversationModal","closeModal","selectedContactIds","setselectedContactIds","contacts","createConversation","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","map","contact","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,iBAApC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,gBAAT,QAAkC,sCAAlC;;;;AAKA,MAAMC,oBAAsC,GAAG,QAEzC;AAAA;;AAAA,MAF0C;AAC9CC,IAAAA;AAD8C,GAE1C;AAEJ,QAAM,CAACC,kBAAD,EAAoBC,qBAApB,IAA6CT,QAAQ,CAAQ,EAAR,CAA3D;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeN,WAAW,EAAhC;AACA,QAAM;AAACO,IAAAA;AAAD,MAAuBN,gBAAgB,EAA7C;;AAEA,WAASO,YAAT,CAAsBC,CAAtB,EAAoC;AAClCA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,kBAAkB,CAACH,kBAAD,CAAlB;AACAD,IAAAA,UAAU;AACX;;AAED,WAASQ,oBAAT,CAA8BC,SAA9B,EAAiD;AAC/CP,IAAAA,qBAAqB,CAACQ,sBAAsB,IAAI;AAC9C,UAAGA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAH,EAA8C;AAC5C,eAAOC,sBAAsB,CAACE,MAAvB,CAA8BC,MAAM,IAAI;AAC7C,iBAAOJ,SAAS,KAAKI,MAArB;AACD,SAFM,CAAP;AAGD,OAJD,MAIM;AACJ,eAAO,CAAC,GAAGH,sBAAJ,EAA2BD,SAA3B,CAAP;AACD;AACF,KARoB,CAArB;AASD;;AACD,sBACE;AAAA,4BACE,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,CAAO,IAAP;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEJ,YAAhB;AAAA,mBAEIF,QAFJ,aAEIA,QAFJ,uBAEIA,QAAQ,CAAEW,GAAV,CAAeC,OAAD,iBACZ,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAGA,OAAO,CAACC,EAAhC;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,KAAK,EAAEf,kBAAkB,CAACU,QAAnB,CAA4BI,OAAO,CAACC,EAApC,IAA0C,CAA1C,GAA6C,CAFtD;AAGE,YAAA,KAAK,EAAED,OAAO,CAACE,IAHjB;AAIE,YAAA,QAAQ,EAAE,MAAMT,oBAAoB,CAACO,OAAO,CAACC,EAAT;AAJtC;AAAA;AAAA;AAAA;AAAA;AADF,WAAyCD,OAAO,CAACC,EAAjD;AAAA;AAAA;AAAA;AAAA,gBADF,CAFJ,eAaE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAsBD,CA/CD;;GAAMjB,oB;UAKiBF,W,EACQC,gB;;;KANzBC,oB;AAgDN,eAAeA,oBAAf","sourcesContent":["import React, { FC, FormEvent, useState } from 'react';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport { useContacts } from \"../../contexts/ContactsProvider\"\r\nimport { useConversations  } from \"../../contexts/ConversationsProvider\"\r\n\r\ninterface NewCoverType {\r\n  closeModal: Function\r\n}\r\nconst NewConversationModal: FC<NewCoverType> = ({\r\n  closeModal\r\n}) => {\r\n\r\n  const [selectedContactIds,setselectedContactIds] = useState<any[]>([])\r\n  const { contacts } = useContacts()\r\n  const {createConversation} = useConversations()\r\n\r\n  function handleSubmit(e: FormEvent) {\r\n    e.preventDefault()\r\n    createConversation(selectedContactIds)\r\n    closeModal()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId : string){\r\n    setselectedContactIds(prevSelectedContactIds => {\r\n      if(prevSelectedContactIds.includes(contactId)){\r\n        return prevSelectedContactIds.filter(prevId => {\r\n          return contactId !== prevId\r\n        })\r\n      }else {\r\n        return [...prevSelectedContactIds,contactId]\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Create Converstions</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {\r\n            contacts?.map((contact: any) => (\r\n              <Form.Group controlId= {contact.id} key={contact.id}>\r\n                <Form.Check \r\n                  type=\"checkbox\"\r\n                  value={selectedContactIds.includes(contact.id) ? 1: 0}\r\n                  label={contact.name}\r\n                  onChange={() => handleCheckboxChange(contact.id)}\r\n                /> \r\n              </Form.Group>\r\n            ))\r\n          }\r\n          <Button type='submit'> Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\nexport default NewConversationModal\r\n"]},"metadata":{},"sourceType":"module"}