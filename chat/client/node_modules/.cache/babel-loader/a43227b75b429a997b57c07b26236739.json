{"ast":null,"code":"var _jsxFileName = \"/run/media/lin/Data/2022study/newchat/oldclient/src/contexts/ConversationsProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext([]);\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    children,\n    id\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectConversationIndex, setselectConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket(null); //创建新对话 \n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      //令其为假 若没有对话 在结尾添加新的对话\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          {\n            madeChange = true;\n            return { ...conversation,\n              messages: [...conversation.messages, newMessage]\n            };\n          }\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          message: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  } //格式化对话 使其方便使用\n\n\n  const formattedConversations = conversations === null || conversations === void 0 ? void 0 : conversations.map((conversation, index) => {\n    var _conversation$recipie, _conversation$message;\n\n    const recipients = (_conversation$recipie = conversation.recipients) === null || _conversation$recipie === void 0 ? void 0 : _conversation$recipie.map(recipient => {\n      //找到我们的联系人\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = (_conversation$message = conversation.messages) === null || _conversation$message === void 0 ? void 0 : _conversation$message.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender; // console.log(contact,name)\n\n      const fromMe = id === message.sender; //添加一个称为发件人的新属性\n\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected,\n      messages\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectConversationIndex],\n    sendMessage,\n    selectConversation: setselectConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ConversationsProvider, \"908mMwer2TqmjXSYKHEve4/KZiM=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/run/media/lin/Data/2022study/newchat/oldclient/src/contexts/ConversationsProvider.tsx"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","children","id","conversations","setConversations","selectConversationIndex","setselectConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","message","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","fromMe","senderName","selected","value","selectedConversation","selectConversation","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, FC, useState, useEffect ,useCallback} from 'react';\r\nimport useLocalStorage from '../compoments/hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext<any>([]);\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport const ConversationsProvider: FC<any> = ({\r\n  children,\r\n  id\r\n}) => {\r\n\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectConversationIndex, setselectConversationIndex] = useState(0)\r\n  const { contacts } = useContacts()\r\n  const socket = useSocket(null)\r\n\r\n  //创建新对话 \r\n  function createConversation(recipients: any) {\r\n    setConversations((prevConversations: any) => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }: { recipients: any, text: any, sender: any }) => {\r\n    setConversations((prevConversations: any) => {\r\n      //令其为假 若没有对话 在结尾添加新的对话\r\n      let madeChange = false\r\n      const newMessage = { sender, text }\r\n\r\n      const newConversations = prevConversations.map(\r\n        (conversation: any) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            {\r\n              madeChange = true\r\n              return {\r\n                ...conversation,\r\n                messages: [...conversation.messages, newMessage]\r\n              }\r\n            }\r\n          }\r\n          return conversation\r\n        }\r\n      )\r\n\r\n      if (madeChange) {\r\n        return newConversations\r\n      } else {\r\n        return [...prevConversations, {\r\n          recipients, message: [newMessage]\r\n        }]\r\n      }\r\n\r\n    })\r\n  },[setConversations])\r\n\r\n  useEffect(() => {\r\n    if(socket == null) return;\r\n\r\n    socket.on('receive-message',addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  },[socket,addMessageToConversation])\r\n\r\n  function sendMessage(recipients: any, text: any) {\r\n\r\n    socket.emit('send-message',{recipients,text})\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n\r\n  //格式化对话 使其方便使用\r\n  const formattedConversations = conversations?.map((conversation: { recipients: any[], messages: any[] }, index: number) => {\r\n\r\n    const recipients = conversation.recipients?.map(recipient => {\r\n\r\n      //找到我们的联系人\r\n\r\n      const contact = contacts.find((contact: { id: string; }) => {\r\n        return contact.id === recipient\r\n      })\r\n\r\n      const name = (contact && contact.name) || recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages?.map(message => {\r\n      const contact = contacts.find((contact: { id: string; }) => {\r\n        return contact.id === message.sender\r\n      })\r\n      const name = (contact && contact.name) || message.sender\r\n      // console.log(contact,name)\r\n      const fromMe = id === message.sender\r\n      //添加一个称为发件人的新属性\r\n      return {...message,senderName:name,fromMe}\r\n    })\r\n    const selected = index === selectConversationIndex\r\n\r\n    return { ...conversation, recipients, selected ,messages}\r\n  })\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectConversationIndex],\r\n    sendMessage,\r\n    selectConversation: setselectConversationIndex,\r\n    createConversation\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a: any[], b: any[]) {\r\n  if (a.length !== b.length) return false\r\n  a.sort()\r\n  b.sort()\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}