{"ast":null,"code":"var _jsxFileName = \"/run/media/lin/Data/2022study/newchat/oldclient/src/compoments/OpenConversation/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { useConversations } from '../../contexts/ConversationsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OpenConversation() {\n  _s();\n\n  var _selectedConversation;\n\n  const [text, setText] = useState(\"\"); // const lastMessageRef = useRef<HTMLDivElement | null>(null)\n\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, []);\n  const {\n    sendMessage,\n    selectedConversation\n  } = useConversations(); // useEffect(() => {\n  //     if(lastMessageRef.current){\n  //         // lastMessageRef.current.scrollIntoView({behavior: \"smooth\"})\n  //         // lastMessageRef.current.scrollIntoView({smooth: true})\n  //         lastMessageRef.current.scrollIntoView()\n  //     }\n  // },[lastMessageRef.current])\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(selectedConversation.recipients.map(r => r.id), text);\n    setText('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column flex-grow-1\",\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 overflow-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column align-items-start justify-content-end px-3\",\n        children: (_selectedConversation = selectedConversation.messages) === null || _selectedConversation === void 0 ? void 0 : _selectedConversation.map((message, index) => {\n          const lastMessage = selectedConversation.messages.length - 1 === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            // ref={lastMessage ? lastMessageRef : null} setRef\n            ref: lastMessage ? setRef : null,\n            className: `my-1 d-flex flex-column ${message.fromMe ? 'align-self-end' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `rounded px-2 py-1 ${message.fromMe ? 'bg-primary text-white' : 'border'}`,\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `text-muted small ${message.fromMe ? 'text-right' : ''}\n                                }`,\n              children: message.fromMe ? 'You' : message.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            required: true,\n            value: text,\n            onChange: e => setText(e.target.value),\n            style: {\n              height: '75px',\n              resize: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OpenConversation, \"P0+CLHtAopk3ZeHTgupmxwa+B5E=\", false, function () {\n  return [useConversations];\n});\n\n_c = OpenConversation;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenConversation\");","map":{"version":3,"sources":["/run/media/lin/Data/2022study/newchat/oldclient/src/compoments/OpenConversation/index.tsx"],"names":["React","useState","useCallback","Button","Form","InputGroup","useConversations","OpenConversation","text","setText","setRef","node","scrollIntoView","behavior","sendMessage","selectedConversation","handleSubmit","e","preventDefault","recipients","map","r","id","margin","messages","message","index","lastMessage","length","fromMe","senderName","target","value","height","resize"],"mappings":"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","sourcesContent":["import React, { FormEvent, useState , useCallback} from 'react';\r\nimport { Button, Form, InputGroup } from 'react-bootstrap';\r\nimport { useConversations } from '../../contexts/ConversationsProvider';\r\n\r\nexport default function OpenConversation() {\r\n\r\n    const [text, setText] = useState(\"\")\r\n    // const lastMessageRef = useRef<HTMLDivElement | null>(null)\r\n    const setRef = useCallback(node => {\r\n        if(node){\r\n            node.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    },[])\r\n    const { sendMessage, selectedConversation } = useConversations()\r\n\r\n    // useEffect(() => {\r\n    //     if(lastMessageRef.current){\r\n    //         // lastMessageRef.current.scrollIntoView({behavior: \"smooth\"})\r\n    //         // lastMessageRef.current.scrollIntoView({smooth: true})\r\n    //         lastMessageRef.current.scrollIntoView()\r\n    //     }\r\n    // },[lastMessageRef.current])\r\n\r\n    function handleSubmit(e: FormEvent) {\r\n        e.preventDefault()\r\n        sendMessage(\r\n            selectedConversation.recipients.map((r: { id: string; }) => r.id),\r\n            text\r\n        )\r\n        setText('')\r\n    }\r\n\r\n    return (\r\n        <div className='d-flex flex-column flex-grow-1' style={{ margin: '20px' }}>\r\n            <div className='flex-grow-1 overflow-auto'>\r\n                <div className='d-flex flex-column align-items-start justify-content-end px-3'>\r\n            \r\n                    {selectedConversation.messages?.map((message: { text: string; fromMe: boolean; senderName: string }, index: number) => {\r\n                        const lastMessage = selectedConversation.messages.length - 1 === index\r\n                        return (\r\n                            <div\r\n                                // ref={lastMessage ? lastMessageRef : null} setRef\r\n                                ref={lastMessage ? setRef : null}\r\n                                key={index}\r\n                                className= {`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end':''}`}\r\n                            >\r\n                                <div \r\n                                    className={`rounded px-2 py-1 ${message.fromMe ? 'bg-primary text-white': 'border'}`\r\n                                }>{message.text}</div>\r\n                                <div className={`text-muted small ${message.fromMe ? 'text-right': ''}\r\n                                }`}>\r\n                                    {message.fromMe ? 'You' : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group>\r\n                    <InputGroup>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            required\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                            style={{ height: '75px', resize: \"none\" }}\r\n                        />\r\n                        <Button type=\"submit\">Send</Button>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}